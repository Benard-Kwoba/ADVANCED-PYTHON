import numpy
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score

numpy.random.seed(42)
# Start with a data set you want to test.
x = numpy.random.normal(3, 1, 100)
y = numpy.random.normal(150, 40, 100) / x  # introducing relationship between x and y

# Split Into Training(80% of the original data)
# and Testing(20% of o.d) sets
train_x = x[:80]
train_y = y[:80]

test_x = x[80:]
test_y = y[80:]

# Draw a polynomial regression line through the data points:
# Note: Degree >=4 polynomials can capture more complex data patterns
coefficients_of_poly_4thdegree = np.polyfit(train_x, train_y, 4)
# create a polynomial function (mymodel) from these coefficients
# np.poly1d allows you to create and manipulate polynomial functions
# in a simplified and readable manner
mymodel = numpy.poly1d(coefficients_of_poly_4thdegree)

# confirming model selection with r squared value
r2 = r2_score(test_y, mymodel(test_x))
print(f"r2 value:\n{r2}")  # 0.7237328929066362 - good
# create a line of best fit
myline = numpy.linspace(0, 6, 100)  # 100 equally spaced points between 0 and 6 on the x-axis.

# based on train and test visualizations, best fit would be a polynomial regression
"""
 ___________________training data visualization______________
plt.scatter(train_x, train_y, marker='*', color='blue'
plt.plot(myline, mymodel(myline),color='red')

 ___________________testing data visualization______________
plt.scatter(test_x, test_y, marker='*', color='blue'
plt.plot(myline, mymodel(myline),color='red')
"""

# predict the amount purchased at 0.5th minute
predicting_time = float(input('Enter time in minutes: '))
amount = mymodel(predicting_time)
print(f"Amount at {predicting_time} minute(s):\n{amount}")

#  visualize the fitted polynomial curve on a plot
plt.scatter(test_x, test_y, marker="*", color="blue")  # plotting the training values
plt.plot(myline, mymodel(myline), color='red')  # plotting line of best fit through the points

# Add a vertical line from the x-axis at 5 minutes to the predicted amount on the curve
plt.axvline(x=predicting_time, color='green', linestyle='--', label=f'{predicting_time} minutes')
plt.axhline(y=amount, color='green', linestyle='--', label=f'Predicted Amount: {amount:.2f}')

# Mark the point of intersection with a yellow round marker
plt.scatter(predicting_time, amount, color='black', marker='o', label='Intersection', zorder=5)
# zorder=5 - marker is drawn on top of other elements in the plot

# Add a label indicating the predicted value at the intersection point
plt.text(predicting_time + 0.1, amount, f'{amount:.2f}', color='purple', fontsize=12, ha='left', va='bottom')

plt.title(f"PREDICTED AMOUNT SPENT AT {predicting_time} MINUTES FROM\nSHOPPING HABITS OF 100 CUSTOMERS")
plt.xlabel("Minutes before purchase")
plt.ylabel("Amount spent on purchase")
plt.show()
