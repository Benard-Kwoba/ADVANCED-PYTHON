import sys
from PyQt5.QtCore import Qt  # Import the Qt module
# Note: backslash (\) is used for line continuation
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit, QGridLayout, \
    QLabel, QComboBox

# Define a class for the calculator application
class CalculatorApp(QWidget):  # QWidget- "parent class" or "base class" , CalculatorApp class
    def __init__(self):
        # subclass (CalculatorApp) inherits the properties and behaviors of its parent class (QWidget)
        super().__init__()  # Call the constructor of the base class (QWidget)
        self.setWindowTitle("Simple Calculator")  # Set the window title
        self.resize(200, 300)  # Resize the window
        self.setStyleSheet("background-color: black;")  # set app background color


        # Create layout managers for arranging widgets vertically and horizontally
        main_layout = QVBoxLayout(self)  # Create a vertical layout for the main layout
        input_layout = QVBoxLayout()  # Create a vertical layout for input field, not linked with any widget instance
        button_layout = QGridLayout()  # Create a grid layout for the buttons


        # Create the input field (QLineEdit) and add it to the input layout
        self.input_field = QLineEdit()
        input_layout.addWidget(self.input_field)
        # Add author field/label
        self.author_label = QLabel("Â©BenayahuSolutions")
        self.author_label.setStyleSheet("color: white; text-decoration: underline;")
        # Add mode selection label
        self.mode_selection_label = QLabel("Mode Selection")
        self.mode_selection_label.setStyleSheet("color: white; justify-contents: left;")
        main_layout.addWidget(self.mode_selection_label, alignment=Qt.AlignBottom | Qt.AlignCenter)
        # Create mode selection with combo box
        self.mode_combo = QComboBox()  # Create a combo box for selecting mode
        self.mode_combo.addItems(["Dark Mode", "Light Mode"])  # Add mode options
        self.mode_combo.setToolTip("Mouse-scroll up/down to switch modes")  # Add tooltip
        self.mode_combo.currentIndexChanged.connect(self.change_mode)  # Connect signal to mode change method

        main_layout.addWidget(self.mode_combo)  # Add combo box to main layout

        # Define the text for the buttons and create buttons for each text
        buttons = [
            ("7", 0, 0), ("8", 0, 1), ("9", 0, 2), ("+", 0, 3),
            ("4", 1, 0), ("5", 1, 1), ("6", 1, 2), ("-", 1, 3),
            ("1", 2, 0), ("2", 2, 1), ("3", 2, 2), ("*", 2, 3),
            ("0", 3, 0), (".", 3, 1), ("=", 3, 2), ("/", 3, 3)
        ]
        for btn_text, row, col in buttons:
            button = QPushButton(btn_text)  # Create a QPushButton with the given text
            button.clicked.connect(self.on_button_clicked)  # Connect the button's clicked signal to the on_button_clicked method
            button_layout.addWidget(button, row, col)  # Add the button to the button layout at the specified row and column

        # Add the input layout and button layout to the main layout
        main_layout.addLayout(input_layout)
        main_layout.addLayout(button_layout)

        # Add the author_label to the main layout
        main_layout.addWidget(self.author_label, alignment=Qt.AlignBottom | Qt.AlignCenter)
        # bitwise OR operator: ensures that the widget is positioned at the bottom center of its layout or parent widget

        self.input_field.returnPressed.connect(self.on_button_clicked)
        self.input_field.setPlaceholderText("Enter your calculation here")
        self.input_field.setToolTip("Keyboard keys supported")  # Add a tooltip

        self.set_dark_mode()  # Set dark mode by default

    def change_mode(self, index):  # for mode selection
        if index == 0:
            self.set_dark_mode()  # Dark mode
        else:
            self.set_light_mode()  # Light mode

    def set_dark_mode(self):
        self.setStyleSheet("background-color: black;")
        self.mode_selection_label.setStyleSheet("color: white;")
        self.author_label.setStyleSheet("color: white; text-decoration: underline; font-style: italic;")
        self.input_field.setStyleSheet(
            "QLineEdit { background-color: #292929; border: 2px solid wheat; border-radius: 5px; padding: 5px;"
            "color: white; font-size: 15px}"
        )
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(
                "QPushButton { background-color: gold; border: 2px solid red; border-radius: 10px; padding: 10px; }"
                "QPushButton:hover { background-color: green; }"
            )

    def set_light_mode(self):
        self.setStyleSheet("background-color: white;")
        self.author_label.setStyleSheet("color: black; text-decoration: underline; font-style: italic;")
        self.mode_selection_label.setStyleSheet("color: black;")
        self.input_field.setStyleSheet(
            "QLineEdit { background-color: white; border: 2px solid black; border-radius: 5px; padding: 5px;"
            "color: black; font-size: 15px}"
        )
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(
                "QPushButton { background-color: lightgray; border: 2px solid black; border-radius: 10px; padding: 10px; }"
                "QPushButton:hover { background-color: gold; }"
            )

    # Define the slot method to handle button clicks
    def on_button_clicked(self):
        self.mode_combo.setStyleSheet("color: green;")
        sender = self.sender()  # Get the sender of the signal (the button that was clicked)
        btn_text = sender.text()  # Get the text of the button that was clicked

        # If the "=" button was clicked, evaluate the expression in the input field
        if btn_text == "=" or sender is self.input_field:
            try:
                result = eval(self.input_field.text())  # Evaluate the expression in the input field
                self.input_field.setText(str(result))  # Display the result in the input field
            except Exception as e:
                self.input_field.setText("Error")  # Display "Error" if there was an error evaluating the expression
        # If any other button was clicked, append its text to the input field
        else:
            current_text = self.input_field.text()  # Get the current text in the input field
            new_text = current_text + btn_text  # Append the text of the clicked button to the current text
            self.input_field.setText(new_text)  # Set the new text in the input field

# Main entry point of the application
if __name__ == "__main__":
    app = QApplication(sys.argv)  # Create the QApplication object
    calculator_app = CalculatorApp()  # Create an instance of the CalculatorApp class
    calculator_app.show()  # Show the calculator application window
    sys.exit(app.exec_())  # Start the event loop and exit the application when it's done
