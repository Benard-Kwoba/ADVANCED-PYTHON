
"""
    -------- STACK IMPLEMENTATION IN PYTHON --------
class Stack:
    # We define a Stack class to encapsulate the stack operations.
    def __init__(self):  # The __init__ method initializes an empty list to store the stack items.
        self.items = []

    # The is_empty method checks if the stack is empty by inspecting the length of the list.
    def is_empty(self):
        return len(self.items) == 0

    # The push method adds an item to the top of the stack using the append method of lists.
    def push(self, item):
        self.items.append(item)

    # The pop method removes and returns the top item from the stack using the pop method of lists.
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("pop from an empty stack")

    # The peek method returns the top item from the stack without removing it.
    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            raise IndexError("peek from an empty stack")

    # The size method returns the number of items in the stack by returning the length of the list.
    def size(self):
        return len(self.items)


# Create a stack object
stack = Stack()

# Push some items onto the stack
stack.push(10)
stack.push(20)
stack.push(30)

# Pop an item from the stack
top_item = stack.pop()
print("Popped item:", top_item)

# Peek at the top item of the stack
top_item = stack.peek()
print("Top item:", top_item)

# Check the size of the stack
print("Size of stack:", stack.size())

# Check if the stack is empty
print("Is stack empty?", stack.is_empty())
    
"""

