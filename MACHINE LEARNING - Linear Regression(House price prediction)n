# Import Libraries and Load Data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load the housing dataset(housing.csv)
housing_data = pd.read_csv("housing.csv")
"""
________________HOUSING.CSV DATA_____________________________
SquareFootage,NumBedrooms,Price
1500,3,300000
2000,4,400000
1200,2,250000
1800,3,350000
2100,4,410000
1600,3,320000
2200,4,420000
1400,2,280000
1900,3,360000
2300,4,430000
"""

# Extract features (e.g., square footage) and target (house price)
X = housing_data[['SquareFootage', 'NumBedrooms']]
y = housing_data['Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create and train a Linear Regression model
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)

# Make predictions on the test set
y_pred = lin_reg.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(F"Mean Squared Error:\n{mse}\nR-squared:\n{r2}")

"""
# Visualize the results
plt.figure(figsize=(10, 6))  # (10, 6) sets the width to 10 inches and the height to 6 inches.
plt.scatter(X_test['SquareFootage'], y_test, label="Actual Prices", color='blue', alpha=0.7)
plt.scatter(X_test['SquareFootage'], y_pred, label="Predicted Prices", color='red', alpha=0.7)
plt.xlabel("Square Footage")
plt.ylabel("Price")
plt.legend()
plt.title("Housing Price Prediction")
plt.grid(True, color="cyan")  # Add grid lines for better readability
plt.tight_layout()  # Adjust layout for better spacing
plt.show()
"""
# _____________PREDICT THE COST OF 3 BEDROOM SITING ON 2500M2 SIZED PLOT ________________

# create new data points
new_data_point = pd.DataFrame({"SquareFootage": [2250], "NumBedrooms": [4]})

# use the model to predict the price
predicted_price = lin_reg.predict(new_data_point)

print(f"Predicted price:\n{predicted_price[0]}")

