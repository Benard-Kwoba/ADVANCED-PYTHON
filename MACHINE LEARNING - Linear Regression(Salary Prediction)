# predicting salary of individuals based on factors like education level, level of experience and job role
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score

def encode_categorical_features(df, columns):
    label_encoder = LabelEncoder()
    for col in columns:
        df[col] = label_encoder.fit_transform(df[col])
    return df

def main():
    # Create a sample dataset
    data = {
        'EducationLevel': ['Bachelor', 'Master', 'PhD', 'Secondary', 'Master'],
        'ExperienceYears': [3, 5, 8, 2, 7],
        'JobRole': ['Analyst', 'Manager', 'Engineer', 'Clerk', 'Controller'],
        'Salary': [50000, 80000, 100000, 30000, 90000]
    }

    df = pd.DataFrame(data)

    # Encode categorical data (EducationLevel and JobRole)
    categorical_columns = ['EducationLevel', 'JobRole']
    df = encode_categorical_features(df, categorical_columns)

    # Split the dataset into features (X) and target variable (y)
    X = df[['EducationLevel', 'ExperienceYears', 'JobRole']]  # Independent variables (features or predictors)
    y = df['Salary']  # Dependent variable (target variable)

    # Set feature names for X
    X.columns = ['EducationLevel', 'ExperienceYears', 'JobRole']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    # note test size 0.2 will mean out of the 5 categories, only 1 part is used for testing, this is small
    # hence you will get r2_score warning

    # Create a linear regression model
    model = LinearRegression()

    # Fit the model on the training data
    model.fit(X_train, y_train)

    # Predict salaries for the test data
    y_pred = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f'Mean Squared Error: {mse}')
    print(f'R-squared (R2) Score: {r2}')

    # Predict the salary for new data
    new_data = pd.DataFrame({
        'EducationLevel': ['Master'],
        'ExperienceYears': [6],
        'JobRole': ['Manager']
    })

    # Encode the categorical variables in the new data
    new_data = encode_categorical_features(new_data, categorical_columns)

    # Set feature names for the new_data
    new_data.columns = ['EducationLevel', 'ExperienceYears', 'JobRole']

    # Predict the salary for the new data point
    predicted_salary = model.predict(new_data)
    print(f'Predicted Salary: Kshs.{predicted_salary[0]:.2f}')

if __name__ == "__main__":
    main()
