
"""
    -------- STACK IMPLEMENTATION IN PYTHON --------
class Stack:
    # We define a Stack class to encapsulate the stack operations.
    def __init__(self):  # The __init__ method initializes an empty list to store the stack items.
        self.items = []

    # The is_empty method checks if the stack is empty by inspecting the length of the list.
    def is_empty(self):
        return len(self.items) == 0

    # The push method adds an item to the top of the stack using the append method of lists.
    def push(self, item):
        self.items.append(item)

    # The pop method removes and returns the top item from the stack using the pop method of lists.
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("pop from an empty stack")

    # The peek method returns the top item from the stack without removing it.
    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            raise IndexError("peek from an empty stack")

    # The size method returns the number of items in the stack by returning the length of the list.
    def size(self):
        return len(self.items)


# Create a stack object
stack = Stack()

# Push some items onto the stack
stack.push(10)
stack.push(20)
stack.push(30)

# Pop an item from the stack
top_item = stack.pop()
print("Popped item:", top_item)

# Peek at the top item of the stack
top_item = stack.peek()
print("Top item:", top_item)

# Check the size of the stack
print("Size of stack:", stack.size())

# Check if the stack is empty
print("Is stack empty?", stack.is_empty())
    
"""
# CASE PROJECT: FILE BACKUP SYSTEM WITH GUI

import os
import shutil
import datetime
import logging
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
                             QTextEdit, QMessageBox, QListWidget, QFileDialog)


class FileBackupScript:
    def __init__(self, backup_dir):
        self.backup_dir = backup_dir
        self.backup_history = []
        self.deleted_files = []  # List to store deleted files along with their paths

    def backup_file(self, source_file):
        # Create backup directory if it doesn't exist
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)

        backup_file_path = os.path.join(self.backup_dir, os.path.basename(source_file))
        try:
            # Copy the file to the backup directory
            shutil.copy2(source_file, backup_file_path)
            print(f"Backed up: {source_file}")
            self.backup_history.append(backup_file_path)
            logging.info(f"{datetime.datetime.now()}: Backed up {source_file}")
        except Exception as e:
            print(f"Error backing up {source_file}: {e}")
            logging.error(f"{datetime.datetime.now()}: Error backing up {source_file}: {e}")

    def delete_backup(self, index):
        if 1 <= index <= len(self.backup_history):
            deleted_file = self.backup_history.pop(index - 1)
            self.deleted_files.append(deleted_file)  # Store the deleted file
            os.remove(deleted_file)
            print(f"Deleted backup: {deleted_file}")
        else:
            print("Invalid index.")

    def restore_previous_backup(self):
        if self.backup_history:
            backup_file = self.backup_history.pop()
            print(f"Restored previous backup: {backup_file}")
            return backup_file
        else:
            print("No previous backups available.")

        # Restore deleted files back to their original locations
        for deleted_file in self.deleted_files:
            try:
                shutil.move(deleted_file, os.path.dirname(deleted_file))  # Move the file back to its original location
                print(f"Restored deleted file: {deleted_file}")
            except Exception as e:
                print(f"Error restoring deleted file {deleted_file}: {e}")

    def display_backup_history(self):
        # Update backup history based on the files present in the backup directory
        self.backup_history = [os.path.join(self.backup_dir, file_name) for file_name in os.listdir(self.backup_dir)]
        if self.backup_history:
            print("Backup History:")
            for idx, backup_file in enumerate(self.backup_history, start=1):
                print(f"{idx}. {backup_file}")
        else:
            print("Backup Folder is empty")

    def auto_backup_files(self, important_files):
        # Create backup directory if it doesn't exist
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)

        # Clear the existing files in the backup directory
        for file_name in os.listdir(self.backup_dir):
            file_path = os.path.join(self.backup_dir, file_name)
            try:
                if os.path.isfile(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"Error deleting file {file_path}: {e}")

        # Copy files from important_files directory to backup directory
        for file_path in important_files:
            source_file = file_path
            backup_file_path = os.path.join(self.backup_dir, os.path.basename(file_path))

            if os.path.exists(source_file):  # Check if the file exists in the backup history
                try:
                    # Copy the source file to the backup directory
                    shutil.copy2(source_file, backup_file_path)
                    print(f"Auto-backed up: {os.path.basename(source_file)}")
                except Exception as e:
                    print(f"Error auto-backing up {os.path.basename(source_file)}: {e}")
            else:
                print(f"Source file not found: {source_file}. Skipping auto-backup.")


class BackupApp(QWidget):
    def __init__(self):
        super().__init__()
        self.total_files = 0  # Initialize total_files as an instance variable
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("File Backup App\u00A9BenayahuSolutions")
        self.setMinimumWidth(600)

        # Backup Directory
        self.backup_dir_label = QLabel("Backup Directory:")
        self.backup_dir_edit = QLineEdit()
        self.backup_dir_edit.setPlaceholderText(f"Defaulted to: {backup_directory}")
        self.backup_dir_edit.setStyleSheet("background-color: cyan; color:black")
        self.backup_dir_edit.setReadOnly(True)
        self.backup_dir_button = QPushButton("Change")
        self.backup_dir_button.clicked.connect(self.select_backup_dir)

        self.backup_dir_layout = QHBoxLayout()
        self.backup_dir_layout.addWidget(self.backup_dir_label)
        self.backup_dir_layout.addWidget(self.backup_dir_edit)
        self.backup_dir_layout.addWidget(self.backup_dir_button)

        # Important Files List
        self.files_label = QLabel(f"Important Files:")
        self.files_list = QListWidget()
        self.files_list.setStyleSheet(
            "QListWidget {"
            "    background-color: #555555;"
            "    color: white;"
            "    border: none;"
            "    padding: 10px 24px;"
            "    text-align: center;"
            "    text-decoration: none;"
            "    display: inline-block;"
            "    font-size: 14px;"
            "    margin: 4px 2px;"
            "    cursor: pointer;"
            "    border-radius: 15px;"
            "}"
            "QListWidget::item:selected {"
            "    background-color: green;"  # Change this color to your desired color for selected items
            "}"
        )

        self.populate_files_list()  # Populate the files list

        # Actions
        # Actions
        self.backup_button = QPushButton("Backup File")
        self.backup_button.clicked.connect(self.backup_file)
        self.backup_button.setStyleSheet(
            "background-color: #4CAF50; color: white; border: none; padding: 5px 10px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 6px;")

        self.delete_button = QPushButton("Delete Backup")
        self.delete_button.clicked.connect(self.delete_backup)
        self.delete_button.setStyleSheet(
            "background-color: #f44336; color: white; border: none; padding: 5px 10px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 6px;")

        self.restore_button = QPushButton("Restore Previous Backup")
        self.restore_button.clicked.connect(self.restore_backup)
        self.restore_button.setStyleSheet(
            "background-color: #008CBA; color: white; border: none; padding: 5px 10px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 6px;")

        self.display_button = QPushButton("Display Backup History")
        self.display_button.clicked.connect(self.display_history)
        self.display_button.setStyleSheet(
            "background-color: #555555; color: white; border: none; padding: 5px 10px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 6px;")

        self.auto_backup_button = QPushButton("Auto-backup Files")
        self.auto_backup_button.clicked.connect(self.auto_backup)
        self.auto_backup_button.setStyleSheet(
            "background-color: #555555; color: white; border: none; padding: 5px 10px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 6px;")

        self.actions_layout = QHBoxLayout()
        self.actions_layout.addWidget(self.backup_button)
        self.actions_layout.addWidget(self.delete_button)
        self.actions_layout.addWidget(self.restore_button)
        self.actions_layout.addWidget(self.display_button)
        self.actions_layout.addWidget(self.auto_backup_button)

        # Log Output
        self.log_label = QLabel("Log Output:")
        self.log_output = QTextEdit()
        self.log_output.setStyleSheet(
            "background-color: #555555; color: white; border: none; padding: 10px 24px; text-align: center; "
            "text-decoration: none; display: inline-block; font-size: 15px; margin: 4px 2px; cursor: pointer; "
            "border-radius: 15px;")
        self.log_output.setReadOnly(True)

        # Main Layout
        self.main_layout = QVBoxLayout()
        self.main_layout.addLayout(self.backup_dir_layout)
        self.main_layout.addWidget(self.files_label)
        self.main_layout.addWidget(self.files_list)
        self.main_layout.addLayout(self.actions_layout)
        self.main_layout.addWidget(self.log_label)
        self.main_layout.addWidget(self.log_output)

        self.setLayout(self.main_layout)

    def select_backup_dir(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Backup Directory")
        if directory:
            self.backup_dir_edit.setText(directory)

    def populate_files_list(self):
        # Populate the files list with all files in the important file path
        important_files = [
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\ADVANCED EXCEL FULL COURSE.xlsm",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\APPLIED BUSINESS MANAGEMENT COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\APPLIED RESEARCH AND ANALYTICS.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\APPLIED SOFTWARE ENGINEERING FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\C++ FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\CYBER SECURITY FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\FRENCH FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\HTML AND CSS FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\JAVA FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\JAVASCRIPT FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\MICROSOFT DEVELOPMENT - FULL STACK.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\PHP FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\PYTHON ADVANCED.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\PYTHON BASIC.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\R FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\SQL AND DBMS FULL COURSE.xlsx",
            r"C:\Users\OtienBer\Box\PERSONAL\BRAINY NOTES\COMPUTER PROGRAMMING AND DATA ANALYTICS\CLASS NOTES\TABLEAU, POWER BI FULL COURSE.xlsx"
        ]
        self.total_files += len(important_files)
        self.files_list.addItems(important_files)

    def backup_file(self):
        source_file, _ = QFileDialog.getOpenFileName(self, "Select File to Backup")
        if source_file:
            backup_script.backup_file(source_file)
            self.display_history()  # Update the backup history

    def delete_backup(self):
        selected_item = self.files_list.currentItem()
        if selected_item:
            index = self.files_list.row(selected_item)
            backup_script.delete_backup(index + 1)
            self.display_history()  # Update the backup history

    def restore_backup(self):
        restored_file = backup_script.restore_previous_backup()
        if restored_file:
            self.log_output.append(f"Restored previous backup: {restored_file}")
            self.display_history()  # Update the backup history

    def display_history(self):
        self.files_list.clear()
        backup_script.display_backup_history()
        self.log_output.append("Backup History:")
        for idx, backup_file in enumerate(backup_script.backup_history, start=1):
            self.files_list.addItem(backup_file)
            self.log_output.append(f"{idx}. {backup_file}")

    def auto_backup(self):
        backup_script.auto_backup_files([self.files_list.item(idx).text() for idx in range(self.files_list.count())])
        self.log_output.append(f"Auto-backup completed.\nTotal Files Backed-up: {self.total_files}")

    def closeEvent(self, event):
        choice = QMessageBox.question(self, "Confirm Exit", "Are you sure you want to exit?", QMessageBox.Yes | QMessageBox.No)
        if choice == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
    backup_directory = r"C:\Users\OtienBer\Desktop\Backup"
    backup_script = FileBackupScript(backup_directory)

    app = QApplication(sys.argv)
    backup_app = BackupApp()
    backup_app.show()
    sys.exit(app.exec_())

