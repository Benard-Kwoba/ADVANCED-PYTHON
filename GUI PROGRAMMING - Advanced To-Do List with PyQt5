# __________________________________________________ VERSION 1.0 ______________________________________________________
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QListWidget, QLabel

class TodoApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Programmer's To-Do List App")
        self.resize(600, 400)
        self.pending_tasks = []
        self.completed_tasks = []

        # Create layouts
        main_layout = QHBoxLayout(self)
        left_layout = QVBoxLayout()
        right_layout = QVBoxLayout()

        # Left Frame
        left_label = QLabel("PENDING TASKS")
        self.pending_tasks_listbox = QListWidget()
        self.task_entry = QLineEdit()
        # Set default placeholder for text entry
        self.task_entry.setPlaceholderText("ADD TASK HERE")
        add_task_button = QPushButton("Add a task")
        add_task_button.clicked.connect(self.add_tasks)
        complete_task_button = QPushButton("Mark task as completed")
        complete_task_button.clicked.connect(self.complete_task)

        left_layout.addWidget(left_label)
        left_layout.addWidget(self.pending_tasks_listbox)
        left_layout.addWidget(self.task_entry)
        left_layout.addWidget(add_task_button)
        left_layout.addWidget(complete_task_button)

        # Right Frame
        right_label = QLabel("COMPLETED TASKS")
        self.completed_tasks_listbox = QListWidget()
        clear_completed_task_button = QPushButton("Clear completed tasks")
        clear_completed_task_button.clicked.connect(self.clear_completed_tasks)

        right_layout.addWidget(right_label)
        right_layout.addWidget(self.completed_tasks_listbox)
        right_layout.addWidget(clear_completed_task_button)

        # Add layouts to main layout
        main_layout.addLayout(left_layout)
        main_layout.addLayout(right_layout)

        # Set background colors
        self.setStyleSheet("""
            QWidget {
                background-color: black;
            }
            QLabel {
                background-color: #ffcc00;
                padding: 5px;
                color: black;
                font-weight:bold;
            }
            /*For multiple element style use e.g QListWidget, QLineEdit */
            QListWidget {
                background-color: #cccccc;
            }
            QLineEdit {
                background-color: white;
                color: black;
                font-weight: bold;
            }
            QPushButton {
                background-color: #98FB98;
                border: 1px solid #4CAF50;
                border-radius: 10px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: yellow;
            }
            QPushButton:pressed {
                background-color: #FF0000;
            }
            
        """)

        self.load_tasks()

    def add_tasks(self):
        task = self.task_entry.text().upper()
        if task:
            self.pending_tasks.append(task)
            self.update_pending_tasks_listbox()
            self.task_entry.clear()
            self.save_tasks()

    def complete_task(self):
        selected_task = self.pending_tasks_listbox.currentRow()
        if selected_task != -1:
            completed_task = self.pending_tasks.pop(selected_task)
            self.update_pending_tasks_listbox()
            self.completed_tasks.append(completed_task)
            self.update_completed_tasks_listbox()
            self.save_tasks()

    def clear_completed_tasks(self):
        self.completed_tasks = []
        self.update_completed_tasks_listbox()
        self.save_tasks()

    def update_pending_tasks_listbox(self):
        self.pending_tasks_listbox.clear()
        for task in self.pending_tasks:
            self.pending_tasks_listbox.addItem(task)

    def update_completed_tasks_listbox(self):
        self.completed_tasks_listbox.clear()
        for task in self.completed_tasks:
            self.completed_tasks_listbox.addItem(task)

    def load_tasks(self):
        try:
            with open("PyQt5_tasks.txt", "r") as file:
                lines = file.readlines()
                self.pending_tasks = []
                self.completed_tasks = []

                pending_section = True
                for line in lines:
                    line = line.strip()
                    if line == "Completed Tasks:":
                        pending_section = False
                    elif pending_section and line != "Pending Tasks:":
                        self.pending_tasks.append(line)
                    elif not pending_section:
                        self.completed_tasks.append(line)

                self.update_pending_tasks_listbox()
                self.update_completed_tasks_listbox()

        except FileNotFoundError:
            pass

    def save_tasks(self):
        with open("PyQt5_tasks.txt", "w") as file:
            file.write("Pending Tasks:\n")
            for task in self.pending_tasks:
                file.write(task + "\n")

            file.write("Completed Tasks:\n")
            for task in self.completed_tasks:
                file.write(task + "\n")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    todo_app = TodoApp()
    todo_app.show()
    sys.exit(app.exec_())






# ______________________________________________ ADVANCED TO-DO LIST: VERSION 1.1 _____________________________________
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QListWidget,
                             QLabel, QAbstractItemView, QToolTip, QMenu, QMessageBox, QAction, QColorDialog,
                             QListWidgetItem)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon

# Creating a custom line edit class:  subclassing a widget
class CustomLineEdit(QLineEdit):
    def __init__(self, parent=None):  # constructor method for the CustomLineEdit class, default parent widget: None
        super().__init__(parent)  # calls the constructor of the superclass (i.e., the parent class) of CustomLineEdit.
        # super(): returns a proxy object that allows you to call methods of the superclass

    def keyPressEvent(self, event):
        # Handling the key press event for Escape key
        if event.key() == Qt.Key_Escape:
            self.clear()  # Clear the text when Escape key is pressed
        else:
            super().keyPressEvent(event)


class TodoApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("To Do List App")
        self.setWindowIcon(QIcon("todo_icon.jpg"))
        self.resize(600, 400)  # see self.setGeometry(600, 600, 400, 300)
        self.pending_tasks = []
        self.completed_tasks = []

        # Create layouts
        main_layout = QHBoxLayout(
            self)  # creates a QHBoxLayout instance named main_layout, setting self (the TodoApp instance) as its parent widget.
        left_layout = QVBoxLayout()
        right_layout = QVBoxLayout()

        # Left Frame
        left_label = QLabel("PENDING TASKS")
        self.pending_tasks_listbox = QListWidget()
        self.pending_tasks_listbox.setSelectionMode(QAbstractItemView.ExtendedSelection)  # see MultipleSelection
        self.pending_tasks_listbox.keyPressEvent = self.pending_tasks_keypress
        self.pending_tasks_listbox.setToolTip('-Use Delete Key or Ctrl + D\non Selection(s) To Delete\nan item(s)' \
                                              '\n-Double click to select')
        self.pending_tasks_listbox.setContextMenuPolicy(Qt.CustomContextMenu)
        self.pending_tasks_listbox.customContextMenuRequested.connect(self.pendingTasksContextMenu)
        self.pending_tasks_listbox.itemDoubleClicked.connect(self.pending_task_doubleclickToCopy)
        self.pending_tasks_listbox.setDragEnabled(True)
        self.pending_tasks_listbox.setAcceptDrops(True)
        self.pending_tasks_listbox.viewport().installEventFilter(self)


        self.task_entry = CustomLineEdit()
        self.task_entry.setEchoMode(0)  # 2 for password entries
        self.task_entry.setPlaceholderText("ADD TASK")
        self.task_entry.setToolTip(
            "Press ESC key to reset entry\nOnce Done Click\n'Add a Task' Button Or Press Enter Key")
        self.task_entry.returnPressed.connect(self.add_tasks)

        add_task_button = QPushButton("Add a Task")  # add_task_button.setText('Add a Task')
        add_task_button.clicked.connect(self.add_tasks)
        complete_task_button = QPushButton("Mark selected task(s) as completed")
        complete_task_button.clicked.connect(self.complete_task)

        left_layout.addWidget(left_label)
        left_layout.addWidget(self.pending_tasks_listbox)
        left_layout.addWidget(self.task_entry)
        left_layout.addWidget(add_task_button)
        left_layout.addWidget(complete_task_button)

        right_label = QLabel("COMPLETED TASKS")
        self.completed_tasks_listbox = QListWidget()
        self.completed_tasks_listbox.setToolTip('Use CTRL+Selection\nfor multiple item selection')
        self.completed_tasks_listbox.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.completed_tasks_listbox.setDragEnabled(True)
        self.completed_tasks_listbox.setAcceptDrops(True)  # Enable dropping here
        self.completed_tasks_listbox.viewport().installEventFilter(self)

        clear_completed_task_button = QPushButton("Clear all completed tasks")
        clear_completed_task_button.setToolTip('Clear all tasks')
        clear_completed_task_button.clicked.connect(self.clear_completed_tasks)
        clear_a_completed_task_button = QPushButton("Clear selected completed task(s)")
        clear_a_completed_task_button.clicked.connect(self.clear_a_completed_task)

        right_layout.addWidget(right_label)
        right_layout.addWidget(self.completed_tasks_listbox)
        right_layout.addWidget(clear_a_completed_task_button)
        right_layout.addWidget(clear_completed_task_button)

        # Add layouts to main layout
        main_layout.addLayout(left_layout)
        main_layout.addLayout(right_layout)

        # Set background colors
        self.setStyleSheet("""
            QWidget {
                background-color: #000;
            }
            QLabel {
                background-color: #ffcc00;
                padding: 5px;
                color: black;
                font-weight:bold;
            }
            /*For multiple element style use e.g QListWidget, QLineEdit */
            QListWidget {
                background-color: #cccccc;
            }
            QLineEdit {
                background-color: white;
                color: black;
                font-weight: bold;
            }
            QPushButton {
                background-color: #98FB98;
                border: 1px solid #4CAF50;
                border-radius: 10px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: yellow;
            }
            QPushButton:pressed {
                background-color: #FF0000;
            }
            QToolTip {
                border: 2px solid black; /* Border color and width */
                border-radius: 7px; /* Border radius to make it circular */
                background-color: grey; /* Background color */
                color: yellow; /* Text color */
                padding: 8px; /* Padding inside the tooltip */
                overflow: hidden;
            }
            QMenu {
                background-color: None;
            }

        """)

        self.load_tasks()

    def pending_task_doubleclickToCopy(self, item):
        clipboard = QApplication.clipboard()
        clipboard.setText(item.text())
    def pendingTasksContextMenu(self, pos):
        context_menu = QMenu(self)
        # sub menu
        context_menu_submenu = context_menu.addMenu("More")
        change_text_color_action = context_menu_submenu.addAction("Change Text Color")
        change_background_color_action = context_menu_submenu.addAction("Change Background Color")
        change_text_color_action.triggered.connect(self.context_menu_submenu_changeTextColor)
        change_background_color_action.triggered.connect(self.context_menu_submenu_changeBackgroundColor)
        context_menu.addSeparator()
        # context_menu.setEnabled(False) to disable
        complete_task_action = context_menu.addAction("Complete Task")
        context_menu.addSeparator()
        delete_action = context_menu.addAction("Delete            Delete")
        select_all_action = context_menu.addAction("Select All      Ctrl+A")
        copy_action = context_menu.addAction("Copy            Ctrl+C")
        action = context_menu.exec_(self.mapToGlobal(pos))

        if action == delete_action:
            self.pendingTasksContextMenu_DeleteTask()
        elif action == complete_task_action:
            self.complete_task()
        elif action == select_all_action:
            self.pendingTasksContextMenu_SelectAll()
        elif action == copy_action:
            self.pendingTasksContextMenu_Copy()

    def pendingTasksContextMenu_DeleteTask(self):
        selected_items = self.pending_tasks_listbox.selectedItems()
        for item in selected_items:
            # remove selected item's text from the self.pending_tasks list
            self.pending_tasks.remove(item.text())
            # remove the item itself from the self.pending_tasks_listbox
            self.pending_tasks_listbox.takeItem(self.pending_tasks_listbox.row(item))
            self.save_tasks()

    def pendingTasksContextMenu_SelectAll(self):
        self.pending_tasks_listbox.selectAll()

    def pendingTasksContextMenu_Copy(self):
        selected_items = self.pending_tasks_listbox.selectedItems()
        if selected_items:
            clipboard_text = "\n".join(item.text() for item in selected_items)
            QApplication.clipboard().setText(clipboard_text)
    def pending_tasks_keypress(self, event):
        modifiers = QApplication.keyboardModifiers()
        if event.key() == Qt.Key_D and modifiers == Qt.ControlModifier:
            # Ctrl + D pressed, delete selected items
            self.pendingTasksContextMenu_DeleteTask()
        elif event.key() == Qt.Key_Delete:  # Delete is not used with modifiers like Ctrl, Alt, Shift, Meta keys(windows)
            # Delete pressed, delete selected items
            self.pendingTasksContextMenu_DeleteTask()
        elif event.key() == Qt.Key_A and modifiers == Qt.ControlModifier:
            # Ctrl + A pressed, select all items
            self.pending_tasks_listbox.selectAll()
        elif event.key() == Qt.Key_C and modifiers == Qt.ControlModifier:
            selected_items = self.pending_tasks_listbox.selectedItems()
            if selected_items:
                clipboard_text = "\n".join(item.text() for item in selected_items)
                QApplication.clipboard().setText(clipboard_text)
        else:
            # Pass other key events to the default implementation
            super().keyPressEvent(event)

    def context_menu_submenu_changeTextColor(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.pending_tasks_listbox.setStyleSheet(f"color: {color.name()}")

    def context_menu_submenu_changeBackgroundColor(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.pending_tasks_listbox.setStyleSheet(f"background-color: {color.name()}")

    def add_tasks(self):
        task = self.task_entry.text().upper()
        if task:
            if task not in self.pending_tasks:
                self.pending_tasks.append(task)
                self.update_pending_tasks_listbox()
                self.task_entry.clear()
                self.save_tasks()
            else:
                msg_box = QMessageBox()
                msg_box.setIcon(QMessageBox.Warning)
                msg_box.setText("Task already exists in the pending tasks list.")
                msg_box.setWindowTitle("Duplicate Task")
                msg_box.exec_()

    def eventFilter(self, obj, event):
        #  The viewport is the area where the items of the list are displayed.
        if obj is self.completed_tasks_listbox.viewport() and event.type() == event.DragEnter:
            event.accept()  #  marks the event as processed but allows further handling by subsequent filters or default handlers.
        elif obj is self.completed_tasks_listbox.viewport() and event.type() == event.Drop:
            mime_data = event.mimeData()  # contains the data being transferred during the drag-and-drop operation.
            items = mime_data.text().split('\n')  #  dragged data is formatted as a newline-separated list of items
            if items:
                # Only call complete_task() if there are items dropped
                self.complete_task()  # Call complete_task function only once
                return True  # Return True to indicate that the event was handled
        elif obj is self.pending_tasks_listbox.viewport() and event.type() == event.DragEnter:
            event.accept()
        elif obj is self.pending_tasks_listbox.viewport() and event.type() == event.Drop:
            mime_data = event.mimeData()
            items = mime_data.text().split('\n')
            if items:
                selected_tasks_to_clear = self.completed_tasks_listbox.selectedIndexes()
                selected_tasks_to_clear.sort(reverse=True,
                                             key=lambda
                                                 x: x.row())  # Reverse sorting to avoid issues when removing items
                for index in selected_tasks_to_clear:
                    selected_task_index = index.row()
                    cleared_task = self.completed_tasks.pop(selected_task_index)
                    self.pending_tasks.append(cleared_task)
                    self.pending_tasks_listbox.addItem(cleared_task)

                self.update_completed_tasks_listbox()
                self.save_tasks()
                return True  # Return True to indicate that the event was handled

        return super().eventFilter(obj, event)

    def completed_tasks_keypress(self, event):
        modifiers = QApplication.keyboardModifiers()
        if event.key() == Qt.Key_C and modifiers == Qt.ControlModifier:
            selected_items = self.completed_tasks_listbox.selectedItems()
            if selected_items:
                clipboard_text = "\n".join(item.text() for item in selected_items)
                QApplication.clipboard().setText(clipboard_text)
        else:
            # Pass other key events to the default implementation
            super().keyPressEvent(event)

    def complete_task(self):
        selected_tasks_indexes = self.pending_tasks_listbox.selectedIndexes()
        selected_tasks_indexes.sort(reverse=True,
                                    key=lambda x: x.row())  # Reverse sorting to avoid issues when removing items
        for index in selected_tasks_indexes:
            selected_task_index = index.row()
            completed_task = self.pending_tasks.pop(selected_task_index)
            if completed_task not in self.completed_tasks:
                self.completed_tasks.append(completed_task)

        self.update_pending_tasks_listbox()
        self.update_completed_tasks_listbox()
        self.save_tasks()

    def clear_a_completed_task(self):
        selected_tasks_to_clear = self.completed_tasks_listbox.selectedIndexes()
        selected_tasks_to_clear.sort(reverse=True,
                                     key=lambda x: x.row())  # Reverse sorting to avoid issues when removing items
        for index in selected_tasks_to_clear:
            selected_task_index = index.row()
            cleared_task = self.completed_tasks.pop(selected_task_index)

        self.update_completed_tasks_listbox()
        self.save_tasks()

    def clear_completed_tasks(self):
        self.completed_tasks = []
        self.update_completed_tasks_listbox()
        self.save_tasks()

    def update_pending_tasks_listbox(self):
        self.pending_tasks_listbox.clear()
        for task in self.pending_tasks:
            self.pending_tasks_listbox.addItem(task)

    def update_completed_tasks_listbox(self):
        self.completed_tasks_listbox.clear()
        for task in self.completed_tasks:
            self.completed_tasks_listbox.addItem(task)

    def load_tasks(self):
        try:
            with open("PyQt5_tasks.txt", "r") as file:
                lines = file.readlines()
                self.pending_tasks = []
                self.completed_tasks = []

                pending_section = True
                for line in lines:
                    line = line.strip()
                    if line == "Completed Tasks:":
                        pending_section = False
                    elif pending_section and line != "Pending Tasks:":
                        self.pending_tasks.append(line)
                    elif not pending_section:
                        self.completed_tasks.append(line)

                self.update_pending_tasks_listbox()
                self.update_completed_tasks_listbox()

        except FileNotFoundError:
            return 'PyQt5_tasks.txt is missing'

    def save_tasks(self):
        with open("PyQt5_tasks.txt", "w") as file:
            file.write("Pending Tasks:\n")
            for task in self.pending_tasks:
                file.write(task + "\n")

            file.write("Completed Tasks:\n")
            for task in self.completed_tasks:
                file.write(task + "\n")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    todo_app = TodoApp()
    todo_app.show()
    sys.exit(app.exec_())

